/**
 * FieldMapperCompact Component
 * –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ OCR –±–ª–æ–∫–æ–≤ –∫ –ø–æ–ª—è–º
 * –° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ª–µ–π
 */

import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';

const translations = {
  en: {
    title: 'Field Mapping',
    autoDetected: 'Auto-detected',
    notMapped: 'Not mapped',
    saveMappings: 'Save',
    rerecognize: 'Re-scan',
    saving: 'Saving...',
    success: 'Saved!',
    error: 'Error'
  },
  ru: {
    title: '–ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª–µ–π',
    autoDetected: '–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
    notMapped: '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ',
    saveMappings: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    rerecognize: '–ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å',
    saving: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...',
    success: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!',
    error: '–û—à–∏–±–∫–∞'
  }
};

// –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
const autoDetectField = (text) => {
  if (!text || text.length < 2) return null;
  
  const lower = text.toLowerCase().trim();
  
  // Email
  if (/@/.test(text)) return 'email';
  
  // Website
  if (/^(https?:\/\/|www\.)/.test(lower)) return 'website';
  
  // Phone (–ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å +, —Å–∫–æ–±–∫–∞–º–∏, –¥–µ—Ñ–∏—Å–∞–º–∏)
  if (/[\d\s\-\+\(\)]{7,}/.test(text) && /\d{3,}/.test(text)) {
    if (/^\+7|^8/.test(text)) return 'phone_mobile';
    return 'phone';
  }
  
  // Address (—Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –¥–æ–º–∞, —É–ª–∏—Ü—É)
  if (/(—É–ª\.|—É–ª–∏—Ü–∞|–ø—Ä\.|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø–µ—Ä\.|–ø–µ—Ä–µ—É–ª–æ–∫|–¥\.|–¥–æ–º)/i.test(text)) return 'address';
  if (/\d+.*?(street|avenue|road|st\.|ave\.|rd\.)/i.test(text)) return 'address';
  
  // Position keywords
  const positionKeywords = ['–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–∏–Ω–∂–µ–Ω–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', 
    'manager', 'director', 'ceo', 'cto', 'developer', 'designer'];
  if (positionKeywords.some(kw => lower.includes(kw))) return 'position';
  
  // Company indicators
  const companyIndicators = ['–æ–æ–æ', '–∑–∞–æ', '–æ–∞–æ', '–∞–æ', '–∏–ø', 'ltd', 'inc', 'corp', 'llc'];
  if (companyIndicators.some(ind => lower.includes(ind))) return 'company';
  
  // Name patterns (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∏–º–µ–Ω–∞)
  if (/^[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+$/.test(text) && text.length < 15) {
    // –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ
    return null; // –ù–µ —É–≥–∞–¥—ã–≤–∞–µ–º, –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç
  }
  
  return null;
};

export const FieldMapperCompact = ({ blocks, onBlocksUpdate, contactId, language = 'ru' }) => {
  const [availableFields, setAvailableFields] = useState([]);
  const [loading, setLoading] = useState(false);
  const [expandedBlock, setExpandedBlock] = useState(null);
  
  const t = translations[language];
  
  useEffect(() => {
    loadAvailableFields();
  }, [contactId]);
  
  // Auto-detect fields on mount
  useEffect(() => {
    if (blocks && blocks.lines && availableFields.length > 0) {
      autoDetectAllFields();
    }
  }, [availableFields.length]);
  
  const loadAvailableFields = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/ocr-blocks/${contactId}/available-fields`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!response.ok) throw new Error('Failed to load fields');
      
      const data = await response.json();
      setAvailableFields(data.fields);
    } catch (error) {
      console.error('[FieldMapper] Error:', error);
    }
  };
  
  const autoDetectAllFields = () => {
    if (!blocks || !blocks.lines) return;
    
    const updatedBlocks = blocks.lines.map(block => {
      // –ï—Å–ª–∏ –ø–æ–ª–µ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ, –Ω–µ –º–µ–Ω—è–µ–º
      if (block.field) return block;
      
      // –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª—è–µ–º
      const detectedField = autoDetectField(block.text);
      if (detectedField) {
        return { ...block, field: detectedField, autoDetected: true };
      }
      return block;
    });
    
    onBlocksUpdate({ ...blocks, lines: updatedBlocks });
  };
  
  const handleFieldChange = (blockIndex, fieldName) => {
    const updatedBlocks = blocks.lines.map((block, idx) => {
      if (idx === blockIndex) {
        return { ...block, field: fieldName || null, autoDetected: false };
      }
      return block;
    });
    
    onBlocksUpdate({ ...blocks, lines: updatedBlocks });
  };
  
  const handleSaveMappings = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      const response = await fetch(`/api/ocr-blocks/${contactId}/save-field-mappings`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ blocks: blocks.lines })
      });
      
      if (!response.ok) throw new Error('Failed to save');
      
      toast.success(t.success);
    } catch (error) {
      console.error('Error saving:', error);
      toast.error(t.error);
    } finally {
      setLoading(false);
    }
  };
  
  const getFieldLabel = (fieldName) => {
    const field = availableFields.find(f => f.name === fieldName);
    return field ? (language === 'ru' ? field.label : field.label_en) : fieldName;
  };
  
  const getFieldColor = (fieldName) => {
    const colors = {
      'first_name': '#3b82f6',
      'last_name': '#3b82f6',
      'middle_name': '#3b82f6',
      'company': '#8b5cf6',
      'position': '#8b5cf6',
      'email': '#10b981',
      'phone': '#f59e0b',
      'phone_mobile': '#f59e0b',
      'phone_work': '#f59e0b',
      'phone_additional': '#f59e0b',
      'address': '#eab308',
      'address_additional': '#eab308',
      'website': '#6366f1',
      'comment': '#6b7280'
    };
    return colors[fieldName] || '#9ca3af';
  };
  
  if (!blocks || !blocks.lines || availableFields.length === 0) return null;
  
  return (
    <div style={{
      marginTop: '20px',
      padding: '15px',
      backgroundColor: 'white',
      borderRadius: '8px',
      border: '1px solid #e5e7eb',
      boxShadow: '0 1px 2px rgba(0,0,0,0.05)'
    }}>
      {/* Header */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        marginBottom: '15px'
      }}>
        <h4 style={{ margin: 0, fontSize: '14px', fontWeight: '600', color: '#374151' }}>
          üìã {t.title}
        </h4>
        
        <button
          onClick={handleSaveMappings}
          disabled={loading}
          style={{
            padding: '6px 16px',
            backgroundColor: loading ? '#9ca3af' : '#10b981',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            fontSize: '13px',
            fontWeight: '500',
            cursor: loading ? 'not-allowed' : 'pointer',
            transition: 'all 0.2s'
          }}
        >
          {loading ? t.saving : `üíæ ${t.saveMappings}`}
        </button>
      </div>
      
      {/* Compact Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',
        gap: '10px'
      }}>
        {blocks.lines.map((block, index) => {
          const fieldColor = block.field ? getFieldColor(block.field) : '#e5e7eb';
          const isExpanded = expandedBlock === index;
          
          return (
            <div
              key={index}
              style={{
                padding: '10px',
                backgroundColor: '#f9fafb',
                border: `2px solid ${fieldColor}`,
                borderRadius: '6px',
                transition: 'all 0.2s',
                cursor: 'pointer'
              }}
              onClick={() => setExpandedBlock(isExpanded ? null : index)}
            >
              {/* Block text preview */}
              <div style={{
                fontSize: '12px',
                color: '#1f2937',
                marginBottom: '8px',
                fontWeight: '500',
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                whiteSpace: 'nowrap'
              }}>
                {block.text || '(–ø—É—Å—Ç–æ)'}
              </div>
              
              {/* Field selector */}
              <select
                value={block.field || ''}
                onChange={(e) => {
                  e.stopPropagation();
                  handleFieldChange(index, e.target.value);
                }}
                onClick={(e) => e.stopPropagation()}
                style={{
                  width: '100%',
                  padding: '5px 8px',
                  fontSize: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '4px',
                  backgroundColor: 'white',
                  color: '#374151',
                  cursor: 'pointer'
                }}
              >
                <option value="">
                  {block.autoDetected ? `‚ú® ${t.autoDetected}` : t.notMapped}
                </option>
                {availableFields.map(field => (
                  <option key={field.name} value={field.name}>
                    {language === 'ru' ? field.label : field.label_en}
                  </option>
                ))}
              </select>
              
              {/* Current field badge */}
              {block.field && (
                <div style={{
                  marginTop: '6px',
                  padding: '3px 8px',
                  backgroundColor: fieldColor,
                  color: 'white',
                  fontSize: '11px',
                  fontWeight: '500',
                  borderRadius: '4px',
                  display: 'inline-block'
                }}>
                  {block.autoDetected && '‚ú® '}
                  {getFieldLabel(block.field)}
                </div>
              )}
            </div>
          );
        })}
      </div>
      
      {/* Legend */}
      <div style={{
        marginTop: '15px',
        padding: '10px',
        backgroundColor: '#f9fafb',
        borderRadius: '6px',
        fontSize: '11px',
        color: '#6b7280'
      }}>
        <div style={{ fontWeight: '600', marginBottom: '6px' }}>–õ–µ–≥–µ–Ω–¥–∞:</div>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
          <span style={{ padding: '2px 8px', backgroundColor: '#3b82f6', color: 'white', borderRadius: '3px' }}>–ò–º—è</span>
          <span style={{ padding: '2px 8px', backgroundColor: '#8b5cf6', color: 'white', borderRadius: '3px' }}>–ö–æ–º–ø–∞–Ω–∏—è</span>
          <span style={{ padding: '2px 8px', backgroundColor: '#10b981', color: 'white', borderRadius: '3px' }}>Email</span>
          <span style={{ padding: '2px 8px', backgroundColor: '#f59e0b', color: 'white', borderRadius: '3px' }}>–¢–µ–ª–µ—Ñ–æ–Ω</span>
          <span style={{ padding: '2px 8px', backgroundColor: '#eab308', color: 'white', borderRadius: '3px' }}>–ê–¥—Ä–µ—Å</span>
          <span style={{ fontSize: '10px' }}>‚ú® = –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span>
        </div>
      </div>
    </div>
  );
};

