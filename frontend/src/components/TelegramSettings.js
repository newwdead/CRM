import React, { useEffect, useState } from 'react';

export default function TelegramSettings({ lang = 'ru' }) {
  const [enabled, setEnabled] = useState(false);
  const [token, setToken] = useState('');
  const [allowed, setAllowed] = useState('');
  const [provider, setProvider] = useState('auto');
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [availableProviders, setAvailableProviders] = useState([]);

  const t = lang === 'ru' ? {
    title: 'ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram',
    loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
    enabled: '–í–∫–ª—é—á–µ–Ω–æ',
    token: 'Bot Token',
    tokenPlaceholder: '123456:ABC-DEF...',
    allowedChats: '–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã',
    allowedChatsPlaceholder: 'ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: 12345,67890',
    ocrProvider: 'OCR –ü—Ä–æ–≤–∞–π–¥–µ—Ä',
    auto: '–ê–≤—Ç–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)',
    save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    saved: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
    webhookTitle: 'üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook',
    webhookDesc: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Polling —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –≤—Ä—É—á–Ω—É—é:',
    pollingTitle: 'üîÑ Telegram Polling (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)',
    pollingDesc: 'Polling –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –±–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.',
    checkStatus: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
    startService: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å',
    stopService: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å',
    viewLogs: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏',
    webhookManual: '–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook',
    webhookNote: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–π HTTPS URL. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.',
    docsLink: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ',
  } : {
    title: 'ü§ñ Telegram Settings',
    loading: 'Loading...',
    enabled: 'Enabled',
    token: 'Bot Token',
    tokenPlaceholder: '123456:ABC-DEF...',
    allowedChats: 'Allowed Chats',
    allowedChatsPlaceholder: 'Comma-separated IDs: 12345,67890',
    ocrProvider: 'OCR Provider',
    auto: 'Auto (recommended)',
    save: 'Save',
    saved: 'Settings saved!',
    webhookTitle: 'üîó Webhook Setup',
    webhookDesc: 'To receive photos from bot, use Telegram Polling service or set up webhook manually:',
    pollingTitle: 'üîÑ Telegram Polling (recommended)',
    pollingDesc: 'Polling automatically checks for updates and works without public URL.',
    checkStatus: 'Check Status',
    startService: 'Start Service',
    stopService: 'Stop Service',
    viewLogs: 'View Logs',
    webhookManual: 'Manual webhook setup',
    webhookNote: 'Requires public HTTPS URL. Use ngrok or similar solution.',
    docsLink: 'Setup Documentation',
  };

  useEffect(() => {
    loadSettings();
    loadProviders();
  }, []);

  const loadSettings = async () => {
    try {
      setLoading(true);
      const res = await fetch('/api/settings/telegram');
      const data = await res.json();
      setEnabled(!!data.enabled);
      setToken(data.token || '');
      setAllowed(data.allowed_chats || '');
      setProvider(data.provider || 'auto');
    } finally {
      setLoading(false);
    }
  };

  const loadProviders = async () => {
    try {
      const res = await fetch('/api/ocr/providers');
      if (res.ok) {
        const data = await res.json();
        setAvailableProviders(data.available || []);
      }
    } catch (e) {
      console.error('Failed to load providers:', e);
    }
  };

  const save = async () => {
    try {
      setSaving(true);
      await fetch('/api/settings/telegram', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ enabled, token, allowed_chats: allowed, provider })
      });
      alert(t.saved);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div>
        <h2>{t.title}</h2>
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px', padding: '20px' }}>
          <div className="spinner"></div>
          <span>{t.loading}</span>
        </div>
      </div>
    );
  }

  return (
    <div>
      <h2>{t.title}</h2>

      {/* Main Settings */}
      <div style={{ marginBottom: '20px' }}>
        {/* Enabled */}
        <div className="form-group">
          <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>
            <input
              type="checkbox"
              checked={enabled}
              onChange={e => setEnabled(e.target.checked)}
            />
            {t.enabled}
          </label>
        </div>

        {/* Token */}
        <div className="form-group">
          <label>{t.token}</label>
          <input
            value={token}
            onChange={e => setToken(e.target.value)}
            placeholder={t.tokenPlaceholder}
            type="password"
            autoComplete="off"
          />
          <div style={{ fontSize: '12px', color: 'var(--text-secondary)', marginTop: '4px' }}>
            {lang === 'ru' 
              ? '–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram' 
              : 'Get token from @BotFather in Telegram'}
          </div>
        </div>

        {/* Allowed Chats */}
        <div className="form-group">
          <label>{t.allowedChats}</label>
          <input
            value={allowed}
            onChange={e => setAllowed(e.target.value)}
            placeholder={t.allowedChatsPlaceholder}
          />
          <div style={{ fontSize: '12px', color: 'var(--text-secondary)', marginTop: '4px' }}>
            {lang === 'ru'
              ? '–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'
              : 'Leave empty to allow all chats (not recommended)'}
          </div>
        </div>

        {/* OCR Provider */}
        <div className="form-group">
          <label>{t.ocrProvider}</label>
          <select
            value={provider}
            onChange={e => setProvider(e.target.value)}
            style={{ maxWidth: '400px' }}
          >
            <option value="auto">{t.auto}</option>
            <option value="tesseract">Tesseract</option>
            {availableProviders.includes('Parsio') && (
              <option value="parsio">Parsio</option>
            )}
            {availableProviders.includes('Google Vision') && (
              <option value="google">Google Vision</option>
            )}
          </select>
          <div style={{ fontSize: '12px', color: 'var(--text-secondary)', marginTop: '4px' }}>
            {lang === 'ru'
              ? 'Auto —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä'
              : 'Auto mode will automatically choose the best available provider'}
          </div>
        </div>

        {/* Save Button */}
        <button onClick={save} disabled={saving} className="success">
          {saving ? (
            <>
              <div className="spinner" style={{
                width: '16px',
                height: '16px',
                display: 'inline-block',
                marginRight: '8px',
                borderWidth: '2px'
              }}></div>
              {t.loading}
            </>
          ) : (
            t.save
          )}
        </button>
      </div>

      {/* Polling Info */}
      <div className="alert info">
        <h4 style={{ marginTop: 0 }}>{t.pollingTitle}</h4>
        <p style={{ marginBottom: '12px' }}>{t.pollingDesc}</p>
        <div style={{ fontSize: '13px' }}>
          <strong>{lang === 'ru' ? '–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:' : 'Management commands:'}</strong>
          <pre style={{
            backgroundColor: 'var(--bg-color)',
            padding: '12px',
            borderRadius: 'var(--radius)',
            marginTop: '8px',
            fontSize: '12px',
            overflowX: 'auto'
          }}>
{`# ${lang === 'ru' ? '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å' : 'Check status'}
sudo systemctl status telegram-polling

# ${lang === 'ru' ? '–ó–∞–ø—É—Å—Ç–∏—Ç—å' : 'Start service'}
sudo systemctl start telegram-polling

# ${lang === 'ru' ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : 'Stop service'}
sudo systemctl stop telegram-polling

# ${lang === 'ru' ? '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏' : 'View logs'}
sudo journalctl -u telegram-polling -f`}
          </pre>
        </div>
        <a
          href="https://github.com/newwdead/CRM/blob/main/TELEGRAM_SETUP.md"
          target="_blank"
          rel="noopener noreferrer"
          style={{
            color: 'var(--primary-color)',
            textDecoration: 'none',
            fontSize: '14px',
            fontWeight: 500
          }}
        >
          üìñ {t.docsLink} ‚Üí
        </a>
      </div>

      {/* Webhook Info (Alternative) */}
      <div className="alert warning" style={{ marginTop: '16px' }}>
        <h4 style={{ marginTop: 0 }}>{t.webhookManual}</h4>
        <p style={{ marginBottom: '12px' }}>{t.webhookNote}</p>
        <pre style={{
          backgroundColor: 'var(--bg-color)',
          padding: '12px',
          borderRadius: 'var(--radius)',
          fontSize: '12px',
          overflowX: 'auto',
          whiteSpace: 'pre-wrap',
          wordBreak: 'break-all'
        }}>
{`https://api.telegram.org/bot<TOKEN>/setWebhook?url=<PUBLIC_URL>/api/telegram/webhook`}
        </pre>
      </div>
    </div>
  );
}
