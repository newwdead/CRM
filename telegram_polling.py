#!/usr/bin/env python3
"""
Telegram Polling Script for BizCard CRM
–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π webhook
"""
import requests
import time
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8424260030:AAEjZnx2zFQ4KvtP7SjnaHVxlL_1Qw9Pm5s")
WEBHOOK_URL = "http://localhost:8000/telegram/webhook"
POLL_INTERVAL = 1  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def get_updates(offset=None):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    params = {"timeout": 30, "allowed_updates": ["message", "edited_message"]}
    if offset:
        params["offset"] = offset
    
    try:
        response = requests.get(url, params=params, timeout=35)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return None

def send_to_webhook(update):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π webhook"""
    try:
        response = requests.post(WEBHOOK_URL, json=update, timeout=60)
        return response.status_code, response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ webhook: {e}")
        return None, str(e)

def main():
    print("ü§ñ Telegram Polling –¥–ª—è BizCard CRM")
    print(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ {POLL_INTERVAL}—Å...")
    print(f"üîó Webhook: {WEBHOOK_URL}")
    print("=" * 60)
    
    offset = None
    processed_count = 0
    
    while True:
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            result = get_updates(offset)
            
            if not result or not result.get("ok"):
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result}")
                time.sleep(POLL_INTERVAL)
                continue
            
            updates = result.get("result", [])
            
            if not updates:
                print(".", end="", flush=True)
                time.sleep(POLL_INTERVAL)
                continue
            
            print()  # –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–µ–∫
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            for update in updates:
                update_id = update.get("update_id")
                message = update.get("message") or update.get("edited_message")
                
                if message:
                    chat_id = message.get("chat", {}).get("id")
                    has_photo = "photo" in message
                    text = message.get("text", "")[:50]
                    
                    print(f"üì® Update #{update_id} | Chat: {chat_id} | Photo: {has_photo} | Text: {text}")
                    
                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ webhook
                    status, response = send_to_webhook(update)
                    
                    if status == 200:
                        if response.get("created_id"):
                            print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: ID {response['created_id']}")
                            processed_count += 1
                        elif response.get("ignored"):
                            print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['ignored']}")
                        else:
                            print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {response}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ {status}: {response}")
                
                # –û–±–Ω–æ–≤–∏—Ç—å offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                offset = update_id + 1
            
            print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ: {processed_count}")
            print("-" * 60)
            
        except KeyboardInterrupt:
            print("\n\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
            print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} —Ñ–æ—Ç–æ")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(POLL_INTERVAL)

if __name__ == "__main__":
    main()

