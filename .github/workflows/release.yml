name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release (e.g., v2.7.1)'
        required: true
        default: ''
      body_path:
        description: 'Path to release notes file'
        required: false
        default: ''

permissions:
  contents: write
  packages: write  # For GHCR (GitHub Container Registry)

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For changelog generation

      - name: Determine tag and notes path
        id: meta
        run: |
          if [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="${{ inputs.tag }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          
          NOTES="${{ inputs.body_path }}"
          if [ -z "$NOTES" ] && [ -f "RELEASE_NOTES_${TAG}.md" ]; then
            NOTES="RELEASE_NOTES_${TAG}.md"
          fi
          echo "notes=$NOTES" >> $GITHUB_OUTPUT
          
          echo "Release tag: $TAG"

      - name: Create source archive
        run: |
          tar --exclude='.git' \
              --exclude='node_modules' \
              --exclude='__pycache__' \
              --exclude='*.pyc' \
              --exclude='uploads' \
              --exclude='data' \
              --exclude='*.db' \
              -czf ibbase-${{ steps.meta.outputs.tag }}.tar.gz .
          
          echo "Created archive: ibbase-${{ steps.meta.outputs.tag }}.tar.gz"

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          body_path: ${{ steps.meta.outputs.notes }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ibbase-${{ steps.meta.outputs.tag }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=ibbase-${{ matrix.component }}
            org.opencontainers.image.description=Business Card CRM - ${{ matrix.component }}
            org.opencontainers.image.vendor=ibbase
      
      - name: Build and push ${{ matrix.component }} image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      
      - name: Image digest
        run: |
          echo "Published component: ${{ matrix.component }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
