name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  # Python dependency scanning
  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety (dependency vulnerabilities)
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          safety check --json || true

      - name: Run Bandit (code security)
        working-directory: ./backend
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -ll

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: backend/bandit-report.json

  # Node.js dependency scanning
  npm-security:
    name: NPM Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run npm audit
        working-directory: ./frontend
        run: |
          npm audit --json > npm-audit.json || true
          npm audit

      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-security-report
          path: frontend/npm-audit.json

  # Docker image scanning
  docker-security:
    name: Docker Image Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build backend image
        run: docker build -t bizcard-backend:test ./backend

      - name: Build frontend image
        run: docker build -t bizcard-frontend:test ./frontend

      - name: Run Trivy scan on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bizcard-backend:test'
          format: 'sarif'
          output: 'trivy-backend.sarif'

      - name: Run Trivy scan on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bizcard-frontend:test'
          format: 'sarif'
          output: 'trivy-frontend.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '.'

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, npm-security, docker-security, secret-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All security scans completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scans performed:" >> $GITHUB_STEP_SUMMARY
          echo "- 🐍 Python dependency scan (Safety)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐍 Python code security (Bandit)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 NPM dependency audit" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker image scan (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Secret scanning (TruffleHog)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔬 Code analysis (CodeQL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY
